http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.
 пишем скрипт
    pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!")
    })
ИЛИ
- закидываем URL в запрос (метод GET)
- приходит ответ This is the first responce from server!
- можно проверить статус код 200 через скрипт 
pm.test("Status code is 200", () => {
  pm.response.to.have.status(200);
});
- видим тест прошел 
- в боди приходит стринг, все окей

   http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
   
   Send и в бади приходит джсон

2. Статус код 200
   
Либо видим статус, либо пускаем тест 
  pm.test("Status code is 200", () => {
  pm.response.to.have.status(200);
   });

3. Спарсить response body в json.

  let jsonData = pm.response.json();
   
4. Проверить, что name в ответе равно name s request (name вбить руками.)
    
    pm.test("Person is Егор", () => {
    const responseJson = pm.response.json();
    pm.expect(responseJson.name).to.eql("Егор");
    });   -  

5. Проверить, что age в ответе равно age s request (age вбить руками.)
   
    pm.test("Age is 23", () => {
    const responseJson = pm.response.json();
    pm.expect(responseJson.age).to.eql("23");
    });

6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)

   pm.test("Salary is 120000", () => {
   const responceJson = pm.response.json();
   pm.expect(responceJson.salary).to.eql(120000)
   });

7. Спарсить request.
  
   let req = pm.request.data;

8. Проверить, что name в ответе равно name s request (name забрать из request.)
 
    pm.test("The name name request", function () {
    pm.expect(jsonData.name).to.eql(req.name);
    });
 

9. Проверить, что age в ответе равно age s request (age забрать из request.)
   
    pm.test("The age age request", function () {
    pm.expect(jsonData.age).to.eql(req.age);
    });


10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

    pm.test("The salary salary request" , function () {
    pm.expect(jsonData.salary).to.eql((parseInt)(req.salary))   
}) ;
    

11. Вывести в консоль параметр family из response.
    
   console.log(pm.response.json().family)    

12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
   
  pm.test("Salary 1.5 year = salary * 4", function (){
    pm.expect(jsonData.family.u_salary_1_5_year).to.eql+((req.get("salary*4")));
}) 

+ переводит переменную в строку (вроде так, тест по крайней мере прошел) 

http://162.55.220.72:5005/object_info_3

1. Отправить запрос. 
   {{url}}/object_info_3 выставляем name age salary и send
 
2. Статус код 200 
   pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
}); 

3. Спарсить response body в json.
  var jsonData = pm.response.json () ;

4. Спарсить request.
  var req = request.data;

5. Проверить, что name в ответе равно name s request (name забрать из request.)
   pm.test("Name = name s request", function (){
    pm.expect(jsonData.Егор).to.eql(req.name);
});
OR
pm.test("Name = name s request", function (){
    pm.expect(jsonData.name).to.eql(req[0].value);
});
OR

6. Проверить, что age в ответе равно age s request (age забрать из request.)
   pm.test("Age - age s request", function () {
    pm.expect(jsonData.age).to.eql(req[1].value);
});


7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)

  pm.test("Salary - salary s request", function (){
    pm.expect(jsonData.salary).to.eql((parseInt) (req[2].value));
}); 
      

8. Вывести в консоль параметр family из response.

   console.log("FAMILY =", jsonData);
  


9. Проверить, что у параметра dog есть параметры name.
   
   pm.test("Dog have name", function () {
   pm.expect(jsonData.family.pets.dog).to.have.property("name")
});


10. Проверить, что у параметра dog есть параметры age.
    
   pm.test("Dog have age", function (){
   pm.expect(jsonData.family.pets.dog).to.have.property("age")
   });

11. Проверить, что параметр name имеет значение Luky.
    
    pm.test("Dog have name Luky", function (){
    pm.expect(jsonData.family.pets.dog.name).to.eql("Luky");
});     

12. Проверить, что параметр age имеет значение 4.

    pm.test("Age = 4", function (){
    pm.expect(jsonData.family.pets.dog.age).to.eql((parseInt)("4"))
});

http://162.55.220.72:5005/object_info_4

1. Отправить запрос.
{{url}}/object_info_4?name=Egor&age=23&salary=120000
2. Статус код 200
pm.test("Status code is 200", function (){
    pm.response.to.have.status(200);
});
3. Спарсить response body в json.

 var jsonData = pm.response.json();
console.log ( "Parsing RESPONCE = ", jsonData);


4. Спарсить request.

var req = pm.request.toJSON().url.query;
console.log("Parsing REQUEST =", req);

5. Проверить, что name в ответе равно name s request (name забрать из request.)
    pm.test("Name - name s request", function () {
    pm.expect(jsonData.name).to.eql(req[0].value)
    });
6. Проверить, что age в ответе равно age из request (age забрать из request.)
   pm.test("Age = age from request", function () {
    pm.expect(jsonData.age).to.eql((parseInt)(req[1].value))
});

7. Вывести в консоль параметр salary из request.
   
   console.log("Salary = ", req[2].value )


8. Вывести в консоль параметр salary из response.
   
   console.log("Salary RESPONSE = ", jsonData.salary) 

9. Вывести в консоль 0-й элемент параметра salary из response.
   
   console.log("0 element salary from response = ", jsonData.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
   
    console.log("1 element salary from response =",
jsonData.salary[1])
   
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
   
    console.log("2 element salary from response =", 
jsonData.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
    
    pm.test("0 element salary = salary from request", function (){
    pm.expect(jsonData.salary[0]).to.eql((parseInt)(req[2].value))
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
    pm.test("1 element salary = salary*2 from request",function (){
    pm.expect((parseInt)(jsonData.salary[1])).to.eql(req[2].value*2)
});
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
    
    pm.test("2 element salary = salary*3 from request", function () {
    pm.expect((parseInt)(jsonData.salary[2])).to.eql(req[2].value*3)
})
 
15. Создать в окружении переменную name    
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name

var resp_name = jsonData.name;
console.log( "Name = " + resp_name)
pm.environment.set("name", resp_name);

19. Передать в окружение переменную age

var resp_age = jsonData.age;
console.log("Age = " + resp_age);
pm.environment.set("age", resp_age);


20. Передать в окружение переменную salary

var resp_salary = jsonData.salary[0];
console.log("Salary = " + resp_salary);
pm.environment.set("salary", resp_salary);


21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
   
   
let sal = [120000,240000,360000];
for (let i=0;i < sal.length; i++)
console.log(sal[i]);
    

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
    
   {{salary}}

2. Вставить параметр age из окружения в age
   
   {{age}}

3. Вставить параметр name из окружения в name
 
   {{name}}

4. Отправить запрос.
 
   send  

5. Статус код 200
   
   pm.test("Status code is 200", function(){
   pm.response.to.have.status(200)
});

6. Спарсить response body в json.
   
   var jsonData = pm.response.json()
   console.log("PARSING RESPONCE =" ,  jsonData);

7. Спарсить request.
 
   var req = pm.request.body.formdata
   console.log('PARSING REQUEST = ', req);
 
8. Проверить, что json response имеет параметр start_qa_salary
   pm.test("JSON RESPONSE HAVE START_QA_SALARY" , function () {
   pm.expect(jsonData.start_qa_salary).to.eql((parseInt)("120000"))
   });

9. Проверить, что json response имеет параметр qa_salary_after_6_months
  
    pm.test("QA SALARY AGTER 6 MONTHS",function(){
    pm.expect(jsonData.qa_salary_after_6_months).to.eql((parseInt)("240000"))
    });

10. Проверить, что json response имеет параметр qa_salary_after_12_months
   
    pm.test("JSON RESPONSE HAVE QA_SALARY_AFTER_12_MONTHS" , function (){
    pm.expect(jsonData.qa_salary_after_12_months).to.eql((parseInt)("324000"))
});

11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
    
    pm.test("JSON RESPONCE HAVE QA_SALARY_AFTER_1.5_YEAR", function (){
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql((parseInt)("396000"))
});

12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
    
    pm.test("JSON RESPONCE QA_SALARY_AFTER_3.5_YEAT", function (){
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eq;((parseInt)("456000"))
});
 
13. Проверить, что json response имеет параметр person

   pm.test("JSON RESPONCE HAVE PERSON", function (){
    pm.expect(jsonData).to.have.property("person");
});

14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)

     pm.test("start_qa_salary = salary from request", function (){
    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary)
});


15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)

    pm.test("qa_salary_after_6_months = salary*2" , function (){
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2)
});

16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
    
    pm.test("qa_salary_after_12_months = salary*2.7" , function (){
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);
});

17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
   
     pm.test("qa_salary_after_1.5_year = salary*3.3", function (){
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(req.salary*3.3)
});
     
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
   
    pm.test("qa_salary_after_3.5_year = salary*3.8", function () {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(req.salary*3.8)
});
   
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
    
    pm.test("Person u_name = salary from request", function (){
    pm.expect(jsonData.person.u_name[1]).to.eql((parseInt)(req.salary))
});
 
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
   
    pm.test("U_age = age from request" , function (){
    pm.expect(jsonData.person.u_age).to.eql(+req.age)
});

21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
   
    pm.test("U_salary_5_years = salary from request", function (){
    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2)
});

22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.
